name: CI/CD workflow deployment to GKE cluster

on:
  workflow_dispatch:
    inputs:
      go-nogo-id:
        description: 'Go-NoGo ID'
        required: true
      change-request-id:
        description: 'Change Request ID'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build and Push Docker image
        run: |
          docker build -t us-central1-docker.pkg.dev/my-new-env/nginx-images/nginx-dev:latest .
          docker push us-central1-docker.pkg.dev/my-new-env/nginx-images/nginx-dev:latest

  static-analysis:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'us-central1-docker.pkg.dev/my-new-env/nginx-images/nginx-dev:latest'
          format: 'table'

  deploy:
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up kubectl
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: poc-k8s
          location: us-central1-c
          project_id: my-new-env

      - name: Deploy to GKE
        run: |
          kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -

          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-dev
            namespace: dev
            labels:
              app: nginx
              env: dev
              owner: Imran
              role: admin
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
                  env: dev
                  owner: Imran
                  role: admin
              spec:
                containers:
                - name: nginx
                  image: us-central1-docker.pkg.dev/my-new-env/nginx-images/nginx-dev:latest
                  ports:
                  - containerPort: 80
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx-service
            namespace: dev
          spec:
            type: NodePort
            selector:
              app: nginx
            ports:
              - port: 80
                targetPort: 80
                nodePort: 30080
          EOF
